// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DnsZoneDomain {
    autoRenew: boolean;
    autoRenewAt: string;
    expiresAt: string;
    id: string;
    name: string;
    registeredAt: string;
    renewalPrice: string;
}

export interface EnvironmentVariableSecretValue {
    /**
     * One of all, dev, branch-deploy, deploy-preview, production, or branch
     */
    context: string;
    contextParameter: string;
    value: string;
}

export interface EnvironmentVariableValue {
    /**
     * One of all, dev, branch-deploy, deploy-preview, production, or branch
     */
    context: string;
    contextParameter?: string;
    value: string;
}

export interface GetDnsZoneDomain {
    autoRenew: boolean;
    autoRenewAt: string;
    expiresAt: string;
    id: string;
    name: string;
    registeredAt: string;
    renewalPrice: string;
}

export interface GetDnsZoneRecord {
    flag: number;
    hostname: string;
    id: string;
    priority: number;
    tag: string;
    ttl: number;
    type: string;
    value: string;
}

export interface GetManagedWafRulesRuleSets {
    definition: outputs.GetManagedWafRulesRuleSetsDefinition;
    rules: outputs.GetManagedWafRulesRuleSetsRule[];
}

export interface GetManagedWafRulesRuleSetsDefinition {
    id: string;
    type: string;
    version: string;
}

export interface GetManagedWafRulesRuleSetsRule {
    category: string;
    description: string;
    id: string;
    phase: string;
    /**
     * notice, warning, error, critical
     */
    severity: string;
}

export interface GetSitesSite {
    customDomain: string;
    domainAliases: string[];
    id: string;
    name: string;
    teamSlug: string;
}

export interface LogDrainServiceConfig {
    authorizationHeader?: string;
    bucketName?: string;
    bucketRegion?: string;
    integrationName?: string;
    path?: string;
    tags?: {[key: string]: string};
    url?: string;
    verificationFilename?: string;
}

export interface SiteFirewallTrafficRulesPublished {
    /**
     * One of allow or deny
     */
    defaultAction: string;
    geoExceptions?: outputs.SiteFirewallTrafficRulesPublishedGeoException[];
    geoRestrictions?: outputs.SiteFirewallTrafficRulesPublishedGeoRestriction[];
    ipExceptions?: outputs.SiteFirewallTrafficRulesPublishedIpException[];
    ipRestrictions?: outputs.SiteFirewallTrafficRulesPublishedIpRestriction[];
}

export interface SiteFirewallTrafficRulesPublishedGeoException {
    countries: string[];
    description: string;
    subregions?: string[];
}

export interface SiteFirewallTrafficRulesPublishedGeoRestriction {
    countries: string[];
    description: string;
    subregions?: string[];
}

export interface SiteFirewallTrafficRulesPublishedIpException {
    addresses: string[];
    description: string;
}

export interface SiteFirewallTrafficRulesPublishedIpRestriction {
    addresses: string[];
    description: string;
}

export interface SiteFirewallTrafficRulesUnpublished {
    /**
     * One of allow or deny
     */
    defaultAction: string;
    geoExceptions?: outputs.SiteFirewallTrafficRulesUnpublishedGeoException[];
    geoRestrictions?: outputs.SiteFirewallTrafficRulesUnpublishedGeoRestriction[];
    ipExceptions?: outputs.SiteFirewallTrafficRulesUnpublishedIpException[];
    ipRestrictions?: outputs.SiteFirewallTrafficRulesUnpublishedIpRestriction[];
}

export interface SiteFirewallTrafficRulesUnpublishedGeoException {
    countries: string[];
    description: string;
    subregions?: string[];
}

export interface SiteFirewallTrafficRulesUnpublishedGeoRestriction {
    countries: string[];
    description: string;
    subregions?: string[];
}

export interface SiteFirewallTrafficRulesUnpublishedIpException {
    addresses: string[];
    description: string;
}

export interface SiteFirewallTrafficRulesUnpublishedIpRestriction {
    addresses: string[];
    description: string;
}

export interface TeamFirewallTrafficRulesPublished {
    /**
     * One of allow or deny
     */
    defaultAction: string;
    geoExceptions?: outputs.TeamFirewallTrafficRulesPublishedGeoException[];
    geoRestrictions?: outputs.TeamFirewallTrafficRulesPublishedGeoRestriction[];
    ipExceptions?: outputs.TeamFirewallTrafficRulesPublishedIpException[];
    ipRestrictions?: outputs.TeamFirewallTrafficRulesPublishedIpRestriction[];
}

export interface TeamFirewallTrafficRulesPublishedGeoException {
    countries: string[];
    description: string;
    subregions?: string[];
}

export interface TeamFirewallTrafficRulesPublishedGeoRestriction {
    countries: string[];
    description: string;
    subregions?: string[];
}

export interface TeamFirewallTrafficRulesPublishedIpException {
    addresses: string[];
    description: string;
}

export interface TeamFirewallTrafficRulesPublishedIpRestriction {
    addresses: string[];
    description: string;
}

export interface TeamFirewallTrafficRulesUnpublished {
    /**
     * One of allow or deny
     */
    defaultAction: string;
    geoExceptions?: outputs.TeamFirewallTrafficRulesUnpublishedGeoException[];
    geoRestrictions?: outputs.TeamFirewallTrafficRulesUnpublishedGeoRestriction[];
    ipExceptions?: outputs.TeamFirewallTrafficRulesUnpublishedIpException[];
    ipRestrictions?: outputs.TeamFirewallTrafficRulesUnpublishedIpRestriction[];
}

export interface TeamFirewallTrafficRulesUnpublishedGeoException {
    countries: string[];
    description: string;
    subregions?: string[];
}

export interface TeamFirewallTrafficRulesUnpublishedGeoRestriction {
    countries: string[];
    description: string;
    subregions?: string[];
}

export interface TeamFirewallTrafficRulesUnpublishedIpException {
    addresses: string[];
    description: string;
}

export interface TeamFirewallTrafficRulesUnpublishedIpRestriction {
    addresses: string[];
    description: string;
}

export interface WafPolicyRuleSet {
    /**
     * Thresholds for each category, e.g. fixation, injection-generic, injection-java, injection-php, lfi, protocol, rce, reputation-scanner, rfi, sqli, ssrf, xss
     */
    categoryThresholds: {[key: string]: number};
    excludedPatterns?: string[];
    /**
     * The managed ID of the rule set. Currently, only crs-basic is supported.
     */
    managedId: string;
    /**
     * Recommended default value is 5
     */
    overallThreshold: number;
    passiveMode: boolean;
    ruleOverrides: {[key: string]: outputs.WafPolicyRuleSetRuleOverrides};
}

export interface WafPolicyRuleSetRuleOverrides {
    /**
     * log_only or none
     */
    action: string;
}

