// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DeployKeyArgs, DeployKeyState } from "./deployKey";
export type DeployKey = import("./deployKey").DeployKey;
export const DeployKey: typeof import("./deployKey").DeployKey = null as any;
utilities.lazyLoad(exports, ["DeployKey"], () => require("./deployKey"));

export { DnsRecordArgs, DnsRecordState } from "./dnsRecord";
export type DnsRecord = import("./dnsRecord").DnsRecord;
export const DnsRecord: typeof import("./dnsRecord").DnsRecord = null as any;
utilities.lazyLoad(exports, ["DnsRecord"], () => require("./dnsRecord"));

export { DnsZoneArgs, DnsZoneState } from "./dnsZone";
export type DnsZone = import("./dnsZone").DnsZone;
export const DnsZone: typeof import("./dnsZone").DnsZone = null as any;
utilities.lazyLoad(exports, ["DnsZone"], () => require("./dnsZone"));

export { EnvironmentVariableArgs, EnvironmentVariableState } from "./environmentVariable";
export type EnvironmentVariable = import("./environmentVariable").EnvironmentVariable;
export const EnvironmentVariable: typeof import("./environmentVariable").EnvironmentVariable = null as any;
utilities.lazyLoad(exports, ["EnvironmentVariable"], () => require("./environmentVariable"));

export { GetDnsZoneArgs, GetDnsZoneResult, GetDnsZoneOutputArgs } from "./getDnsZone";
export const getDnsZone: typeof import("./getDnsZone").getDnsZone = null as any;
export const getDnsZoneOutput: typeof import("./getDnsZone").getDnsZoneOutput = null as any;
utilities.lazyLoad(exports, ["getDnsZone","getDnsZoneOutput"], () => require("./getDnsZone"));

export { GetManagedWafRulesArgs, GetManagedWafRulesResult, GetManagedWafRulesOutputArgs } from "./getManagedWafRules";
export const getManagedWafRules: typeof import("./getManagedWafRules").getManagedWafRules = null as any;
export const getManagedWafRulesOutput: typeof import("./getManagedWafRules").getManagedWafRulesOutput = null as any;
utilities.lazyLoad(exports, ["getManagedWafRules","getManagedWafRulesOutput"], () => require("./getManagedWafRules"));

export { GetSiteArgs, GetSiteResult, GetSiteOutputArgs } from "./getSite";
export const getSite: typeof import("./getSite").getSite = null as any;
export const getSiteOutput: typeof import("./getSite").getSiteOutput = null as any;
utilities.lazyLoad(exports, ["getSite","getSiteOutput"], () => require("./getSite"));

export { GetSitesArgs, GetSitesResult, GetSitesOutputArgs } from "./getSites";
export const getSites: typeof import("./getSites").getSites = null as any;
export const getSitesOutput: typeof import("./getSites").getSitesOutput = null as any;
utilities.lazyLoad(exports, ["getSites","getSitesOutput"], () => require("./getSites"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { LogDrainArgs, LogDrainState } from "./logDrain";
export type LogDrain = import("./logDrain").LogDrain;
export const LogDrain: typeof import("./logDrain").LogDrain = null as any;
utilities.lazyLoad(exports, ["LogDrain"], () => require("./logDrain"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SiteBuildSettingsArgs, SiteBuildSettingsState } from "./siteBuildSettings";
export type SiteBuildSettings = import("./siteBuildSettings").SiteBuildSettings;
export const SiteBuildSettings: typeof import("./siteBuildSettings").SiteBuildSettings = null as any;
utilities.lazyLoad(exports, ["SiteBuildSettings"], () => require("./siteBuildSettings"));

export { SiteCollaborationSettingsArgs, SiteCollaborationSettingsState } from "./siteCollaborationSettings";
export type SiteCollaborationSettings = import("./siteCollaborationSettings").SiteCollaborationSettings;
export const SiteCollaborationSettings: typeof import("./siteCollaborationSettings").SiteCollaborationSettings = null as any;
utilities.lazyLoad(exports, ["SiteCollaborationSettings"], () => require("./siteCollaborationSettings"));

export { SiteDomainSettingsArgs, SiteDomainSettingsState } from "./siteDomainSettings";
export type SiteDomainSettings = import("./siteDomainSettings").SiteDomainSettings;
export const SiteDomainSettings: typeof import("./siteDomainSettings").SiteDomainSettings = null as any;
utilities.lazyLoad(exports, ["SiteDomainSettings"], () => require("./siteDomainSettings"));

export { SiteFirewallTrafficRulesArgs, SiteFirewallTrafficRulesState } from "./siteFirewallTrafficRules";
export type SiteFirewallTrafficRules = import("./siteFirewallTrafficRules").SiteFirewallTrafficRules;
export const SiteFirewallTrafficRules: typeof import("./siteFirewallTrafficRules").SiteFirewallTrafficRules = null as any;
utilities.lazyLoad(exports, ["SiteFirewallTrafficRules"], () => require("./siteFirewallTrafficRules"));

export { SiteMetricsSettingsArgs, SiteMetricsSettingsState } from "./siteMetricsSettings";
export type SiteMetricsSettings = import("./siteMetricsSettings").SiteMetricsSettings;
export const SiteMetricsSettings: typeof import("./siteMetricsSettings").SiteMetricsSettings = null as any;
utilities.lazyLoad(exports, ["SiteMetricsSettings"], () => require("./siteMetricsSettings"));

export { TeamFirewallTrafficRulesArgs, TeamFirewallTrafficRulesState } from "./teamFirewallTrafficRules";
export type TeamFirewallTrafficRules = import("./teamFirewallTrafficRules").TeamFirewallTrafficRules;
export const TeamFirewallTrafficRules: typeof import("./teamFirewallTrafficRules").TeamFirewallTrafficRules = null as any;
utilities.lazyLoad(exports, ["TeamFirewallTrafficRules"], () => require("./teamFirewallTrafficRules"));

export { WafPolicyArgs, WafPolicyState } from "./wafPolicy";
export type WafPolicy = import("./wafPolicy").WafPolicy;
export const WafPolicy: typeof import("./wafPolicy").WafPolicy = null as any;
utilities.lazyLoad(exports, ["WafPolicy"], () => require("./wafPolicy"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "netlify:index/deployKey:DeployKey":
                return new DeployKey(name, <any>undefined, { urn })
            case "netlify:index/dnsRecord:DnsRecord":
                return new DnsRecord(name, <any>undefined, { urn })
            case "netlify:index/dnsZone:DnsZone":
                return new DnsZone(name, <any>undefined, { urn })
            case "netlify:index/environmentVariable:EnvironmentVariable":
                return new EnvironmentVariable(name, <any>undefined, { urn })
            case "netlify:index/logDrain:LogDrain":
                return new LogDrain(name, <any>undefined, { urn })
            case "netlify:index/siteBuildSettings:SiteBuildSettings":
                return new SiteBuildSettings(name, <any>undefined, { urn })
            case "netlify:index/siteCollaborationSettings:SiteCollaborationSettings":
                return new SiteCollaborationSettings(name, <any>undefined, { urn })
            case "netlify:index/siteDomainSettings:SiteDomainSettings":
                return new SiteDomainSettings(name, <any>undefined, { urn })
            case "netlify:index/siteFirewallTrafficRules:SiteFirewallTrafficRules":
                return new SiteFirewallTrafficRules(name, <any>undefined, { urn })
            case "netlify:index/siteMetricsSettings:SiteMetricsSettings":
                return new SiteMetricsSettings(name, <any>undefined, { urn })
            case "netlify:index/teamFirewallTrafficRules:TeamFirewallTrafficRules":
                return new TeamFirewallTrafficRules(name, <any>undefined, { urn })
            case "netlify:index/wafPolicy:WafPolicy":
                return new WafPolicy(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("netlify", "index/deployKey", _module)
pulumi.runtime.registerResourceModule("netlify", "index/dnsRecord", _module)
pulumi.runtime.registerResourceModule("netlify", "index/dnsZone", _module)
pulumi.runtime.registerResourceModule("netlify", "index/environmentVariable", _module)
pulumi.runtime.registerResourceModule("netlify", "index/logDrain", _module)
pulumi.runtime.registerResourceModule("netlify", "index/siteBuildSettings", _module)
pulumi.runtime.registerResourceModule("netlify", "index/siteCollaborationSettings", _module)
pulumi.runtime.registerResourceModule("netlify", "index/siteDomainSettings", _module)
pulumi.runtime.registerResourceModule("netlify", "index/siteFirewallTrafficRules", _module)
pulumi.runtime.registerResourceModule("netlify", "index/siteMetricsSettings", _module)
pulumi.runtime.registerResourceModule("netlify", "index/teamFirewallTrafficRules", _module)
pulumi.runtime.registerResourceModule("netlify", "index/wafPolicy", _module)
pulumi.runtime.registerResourcePackage("netlify", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:netlify") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
