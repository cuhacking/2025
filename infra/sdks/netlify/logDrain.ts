// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LogDrain extends pulumi.CustomResource {
    /**
     * Get an existing LogDrain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LogDrainState, opts?: pulumi.CustomResourceOptions): LogDrain {
        return new LogDrain(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netlify:index/logDrain:LogDrain';

    /**
     * Returns true if the given object is an instance of LogDrain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LogDrain {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogDrain.__pulumiType;
    }

    /**
     * One of datadog, newrelic, logflare, s3, splunkcloud, http, axiom, or azure
     */
    public readonly destination!: pulumi.Output<string>;
    public readonly excludePii!: pulumi.Output<boolean>;
    /**
     * json or ndjson
     */
    public readonly format!: pulumi.Output<string>;
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * One or more of user_traffic, functions, edge_functions, and deploys
     */
    public readonly logTypes!: pulumi.Output<string[]>;
    public readonly serviceConfig!: pulumi.Output<outputs.LogDrainServiceConfig>;
    public readonly siteId!: pulumi.Output<string>;

    /**
     * Create a LogDrain resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LogDrainArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LogDrainArgs | LogDrainState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LogDrainState | undefined;
            resourceInputs["destination"] = state ? state.destination : undefined;
            resourceInputs["excludePii"] = state ? state.excludePii : undefined;
            resourceInputs["format"] = state ? state.format : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["logTypes"] = state ? state.logTypes : undefined;
            resourceInputs["serviceConfig"] = state ? state.serviceConfig : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
        } else {
            const args = argsOrState as LogDrainArgs | undefined;
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            if ((!args || args.excludePii === undefined) && !opts.urn) {
                throw new Error("Missing required property 'excludePii'");
            }
            if ((!args || args.logTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logTypes'");
            }
            if ((!args || args.serviceConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceConfig'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["destination"] = args ? args.destination : undefined;
            resourceInputs["excludePii"] = args ? args.excludePii : undefined;
            resourceInputs["format"] = args ? args.format : undefined;
            resourceInputs["logTypes"] = args ? args.logTypes : undefined;
            resourceInputs["serviceConfig"] = args ? args.serviceConfig : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LogDrain.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering LogDrain resources.
 */
export interface LogDrainState {
    /**
     * One of datadog, newrelic, logflare, s3, splunkcloud, http, axiom, or azure
     */
    destination?: pulumi.Input<string>;
    excludePii?: pulumi.Input<boolean>;
    /**
     * json or ndjson
     */
    format?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * One or more of user_traffic, functions, edge_functions, and deploys
     */
    logTypes?: pulumi.Input<pulumi.Input<string>[]>;
    serviceConfig?: pulumi.Input<inputs.LogDrainServiceConfig>;
    siteId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LogDrain resource.
 */
export interface LogDrainArgs {
    /**
     * One of datadog, newrelic, logflare, s3, splunkcloud, http, axiom, or azure
     */
    destination: pulumi.Input<string>;
    excludePii: pulumi.Input<boolean>;
    /**
     * json or ndjson
     */
    format?: pulumi.Input<string>;
    /**
     * One or more of user_traffic, functions, edge_functions, and deploys
     */
    logTypes: pulumi.Input<pulumi.Input<string>[]>;
    serviceConfig: pulumi.Input<inputs.LogDrainServiceConfig>;
    siteId: pulumi.Input<string>;
}
