// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class EnvironmentVariable extends pulumi.CustomResource {
    /**
     * Get an existing EnvironmentVariable resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EnvironmentVariableState, opts?: pulumi.CustomResourceOptions): EnvironmentVariable {
        return new EnvironmentVariable(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netlify:index/environmentVariable:EnvironmentVariable';

    /**
     * Returns true if the given object is an instance of EnvironmentVariable.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EnvironmentVariable {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EnvironmentVariable.__pulumiType;
    }

    public readonly key!: pulumi.Output<string>;
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    /**
     * One or more of builds, functions, runtime, and post-processing
     */
    public readonly scopes!: pulumi.Output<string[]>;
    public readonly secretValues!: pulumi.Output<outputs.EnvironmentVariableSecretValue[] | undefined>;
    public readonly siteId!: pulumi.Output<string | undefined>;
    /**
     * Required if a default team was not configured in the provider configuration.
     */
    public readonly teamId!: pulumi.Output<string>;
    public readonly values!: pulumi.Output<outputs.EnvironmentVariableValue[] | undefined>;

    /**
     * Create a EnvironmentVariable resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EnvironmentVariableArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EnvironmentVariableArgs | EnvironmentVariableState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EnvironmentVariableState | undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["secretValues"] = state ? state.secretValues : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["values"] = state ? state.values : undefined;
        } else {
            const args = argsOrState as EnvironmentVariableArgs | undefined;
            if ((!args || args.key === undefined) && !opts.urn) {
                throw new Error("Missing required property 'key'");
            }
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["secretValues"] = args ? args.secretValues : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["values"] = args ? args.values : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EnvironmentVariable.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering EnvironmentVariable resources.
 */
export interface EnvironmentVariableState {
    key?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    /**
     * One or more of builds, functions, runtime, and post-processing
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    secretValues?: pulumi.Input<pulumi.Input<inputs.EnvironmentVariableSecretValue>[]>;
    siteId?: pulumi.Input<string>;
    /**
     * Required if a default team was not configured in the provider configuration.
     */
    teamId?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<inputs.EnvironmentVariableValue>[]>;
}

/**
 * The set of arguments for constructing a EnvironmentVariable resource.
 */
export interface EnvironmentVariableArgs {
    key: pulumi.Input<string>;
    /**
     * One or more of builds, functions, runtime, and post-processing
     */
    scopes?: pulumi.Input<pulumi.Input<string>[]>;
    secretValues?: pulumi.Input<pulumi.Input<inputs.EnvironmentVariableSecretValue>[]>;
    siteId?: pulumi.Input<string>;
    /**
     * Required if a default team was not configured in the provider configuration.
     */
    teamId?: pulumi.Input<string>;
    values?: pulumi.Input<pulumi.Input<inputs.EnvironmentVariableValue>[]>;
}
