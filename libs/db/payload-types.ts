/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    teams: Team;
    brands: Brand;
    media: Media;
    emails: Email;
    roles: Role;
    users: User;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    teams: TeamsSelect<false> | TeamsSelect<true>;
    brands: BrandsSelect<false> | BrandsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    emails: EmailsSelect<false> | EmailsSelect<true>;
    roles: RolesSelect<false> | RolesSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    constants: Constant;
  };
  globalsSelect: {
    constants: ConstantsSelect<false> | ConstantsSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "teams".
 */
export interface Team {
  id: number;
  name?: string | null;
  avatar?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brands".
 */
export interface Brand {
  id: number;
  name: string;
  description?: string | null;
  domain?: string | null;
  links?:
    | {
        name?: string | null;
        link?: string | null;
        id?: string | null;
      }[]
    | null;
  email?: string | null;
  phone?: number | null;
  location?: string | null;
  symbol?: (number | null) | Media;
  wordmark?: (number | null) | Media;
  github?: string | null;
  linkedin?: string | null;
  instagram?: string | null;
  discord?: string | null;
  behance?: string | null;
  figma?: string | null;
  linktree?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "emails".
 */
export interface Email {
  id: number;
  title: string;
  body: {
    text: string;
    buttonText: string;
    buttonLink: string;
    footer: string;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "roles".
 */
export interface Role {
  id: number;
  name: string;
  access: string;
  admin?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  roles?: ('admin' | 'user')[] | null;
  displayName?: string | null;
  firstName?: string | null;
  middleName?: string | null;
  lastName?: string | null;
  pronouns?: ('he/him' | 'she/her' | 'they/them' | 'other') | null;
  avatar?: (number | null) | Media;
  dietaryRestrictions?:
    | (
        | 'vegetarian'
        | 'vegan'
        | 'halal'
        | 'kosher'
        | 'pescatarian'
        | 'dairy-free'
        | 'gluten-free'
        | 'shellfish-free'
        | 'nut-free'
        | 'keto'
        | 'low-lactose'
        | 'low-carb'
        | 'paleo'
        | 'high-protein'
        | 'raw-vegan'
        | 'whole30'
        | 'fasting'
        | 'other'
      )[]
    | null;
  allergies?:
    | (
        | 'peanuts'
        | 'tree-nuts'
        | 'dairy'
        | 'gluten'
        | 'shellfish'
        | 'fish'
        | 'soy'
        | 'eggs'
        | 'red-meat'
        | 'corn'
        | 'sulfites'
        | 'fruits'
        | 'vegetables'
        | 'caffeine'
        | 'honey'
        | 'other'
      )[]
    | null;
  tshirtSize?: ('xs' | 's' | 'm' | 'l' | 'xl' | '2xl' | '3xl') | null;
  emergencyContactFullName?: string | null;
  emergencyContactCell?: string | null;
  emergencyContactEmailAddress?: string | null;
  website?: string | null;
  behance?: string | null;
  linkedinVanity?: string | null;
  linkedinId?: string | null;
  linkedinEmailVerified?: boolean | null;
  linkedinLocale?: string | null;
  githubUrl?: string | null;
  githubEmail?: string | null;
  githubId?: string | null;
  githubAvatarUrl?: string | null;
  githubType?: string | null;
  githubHtmlUrl?: string | null;
  githubName?: string | null;
  githubBlog?: string | null;
  githubLocation?: string | null;
  githubHireable?: string | null;
  githubPublicRepos?: string | null;
  githubLinkedin?: string | null;
  githubInstagram?: string | null;
  discordEmailVerified?: boolean | null;
  googleEmail?: string | null;
  googleEmailVerified?: boolean | null;
  linkedinSub?: string | null;
  githubSub?: string | null;
  discordSub?: string | null;
  googleSub?: string | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'teams';
        value: number | Team;
      } | null)
    | ({
        relationTo: 'brands';
        value: number | Brand;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'emails';
        value: number | Email;
      } | null)
    | ({
        relationTo: 'roles';
        value: number | Role;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "teams_select".
 */
export interface TeamsSelect<T extends boolean = true> {
  name?: T;
  avatar?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brands_select".
 */
export interface BrandsSelect<T extends boolean = true> {
  name?: T;
  description?: T;
  domain?: T;
  links?:
    | T
    | {
        name?: T;
        link?: T;
        id?: T;
      };
  email?: T;
  phone?: T;
  location?: T;
  symbol?: T;
  wordmark?: T;
  github?: T;
  linkedin?: T;
  instagram?: T;
  discord?: T;
  behance?: T;
  figma?: T;
  linktree?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "emails_select".
 */
export interface EmailsSelect<T extends boolean = true> {
  title?: T;
  body?:
    | T
    | {
        text?: T;
        buttonText?: T;
        buttonLink?: T;
        footer?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "roles_select".
 */
export interface RolesSelect<T extends boolean = true> {
  name?: T;
  access?: T;
  admin?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  roles?: T;
  displayName?: T;
  firstName?: T;
  middleName?: T;
  lastName?: T;
  pronouns?: T;
  avatar?: T;
  dietaryRestrictions?: T;
  allergies?: T;
  tshirtSize?: T;
  emergencyContactFullName?: T;
  emergencyContactCell?: T;
  emergencyContactEmailAddress?: T;
  website?: T;
  behance?: T;
  linkedinVanity?: T;
  linkedinId?: T;
  linkedinEmailVerified?: T;
  linkedinLocale?: T;
  githubUrl?: T;
  githubEmail?: T;
  githubId?: T;
  githubAvatarUrl?: T;
  githubType?: T;
  githubHtmlUrl?: T;
  githubName?: T;
  githubBlog?: T;
  githubLocation?: T;
  githubHireable?: T;
  githubPublicRepos?: T;
  githubLinkedin?: T;
  githubInstagram?: T;
  discordEmailVerified?: T;
  googleEmail?: T;
  googleEmailVerified?: T;
  linkedinSub?: T;
  githubSub?: T;
  discordSub?: T;
  googleSub?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "constants".
 */
export interface Constant {
  id: number;
  portal?: {
    dashboard?: {
      cards?:
        | {
            title?: string | null;
            id?: string | null;
          }[]
        | null;
    };
    login?: string | null;
    terms?: {
      title?: string | null;
      description?: string | null;
      accordion?:
        | {
            title?: string | null;
            text?: string | null;
            checkbox?: boolean | null;
            checkboxLabel?: string | null;
            id?: string | null;
          }[]
        | null;
    };
    profile?: string | null;
    registration?: string | null;
  };
  website?: {
    header?: {
      logo?: (number | null) | Media;
      links?:
        | {
            text?: string | null;
            link?: string | null;
            id?: string | null;
          }[]
        | null;
    };
    hero?: string | null;
    about?: string | null;
    events?: string | null;
    sponsors?: string | null;
    faq?:
      | {
          question?: string | null;
          answers?:
            | {
                bullet?: string | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
    footer?:
      | {
          logo?: (number | null) | Media;
          links?:
            | {
                text?: string | null;
                link?: string | null;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  settings?: {
    brand?: string | null;
    year?: number | null;
  };
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "constants_select".
 */
export interface ConstantsSelect<T extends boolean = true> {
  portal?:
    | T
    | {
        dashboard?:
          | T
          | {
              cards?:
                | T
                | {
                    title?: T;
                    id?: T;
                  };
            };
        login?: T;
        terms?:
          | T
          | {
              title?: T;
              description?: T;
              accordion?:
                | T
                | {
                    title?: T;
                    text?: T;
                    checkbox?: T;
                    checkboxLabel?: T;
                    id?: T;
                  };
            };
        profile?: T;
        registration?: T;
      };
  website?:
    | T
    | {
        header?:
          | T
          | {
              logo?: T;
              links?:
                | T
                | {
                    text?: T;
                    link?: T;
                    id?: T;
                  };
            };
        hero?: T;
        about?: T;
        events?: T;
        sponsors?: T;
        faq?:
          | T
          | {
              question?: T;
              answers?:
                | T
                | {
                    bullet?: T;
                    id?: T;
                  };
              id?: T;
            };
        footer?:
          | T
          | {
              logo?: T;
              links?:
                | T
                | {
                    text?: T;
                    link?: T;
                    id?: T;
                  };
              id?: T;
            };
      };
  settings?:
    | T
    | {
        brand?: T;
        year?: T;
      };
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}