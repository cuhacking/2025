// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SiteBuildSettings extends pulumi.CustomResource {
    /**
     * Get an existing SiteBuildSettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SiteBuildSettingsState, opts?: pulumi.CustomResourceOptions): SiteBuildSettings {
        return new SiteBuildSettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netlify:index/siteBuildSettings:SiteBuildSettings';

    /**
     * Returns true if the given object is an instance of SiteBuildSettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SiteBuildSettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SiteBuildSettings.__pulumiType;
    }

    public readonly baseDirectory!: pulumi.Output<string>;
    public readonly branchDeployAllBranches!: pulumi.Output<boolean>;
    public readonly branchDeployBranches!: pulumi.Output<string[]>;
    public readonly buildCommand!: pulumi.Output<string>;
    public readonly buildImage!: pulumi.Output<string>;
    public readonly deployPreviews!: pulumi.Output<boolean>;
    public readonly functionsDirectory!: pulumi.Output<string>;
    public readonly functionsRegion!: pulumi.Output<string>;
    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    public readonly packageDirectory!: pulumi.Output<string>;
    public readonly prettyUrls!: pulumi.Output<boolean>;
    public readonly productionBranch!: pulumi.Output<string>;
    public readonly publishDirectory!: pulumi.Output<string>;
    public readonly siteId!: pulumi.Output<string>;
    public readonly stopBuilds!: pulumi.Output<boolean>;
    /**
     * See more details in the netlify.WafPolicy resource.
     */
    public readonly wafPolicyId!: pulumi.Output<string | undefined>;

    /**
     * Create a SiteBuildSettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SiteBuildSettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SiteBuildSettingsArgs | SiteBuildSettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SiteBuildSettingsState | undefined;
            resourceInputs["baseDirectory"] = state ? state.baseDirectory : undefined;
            resourceInputs["branchDeployAllBranches"] = state ? state.branchDeployAllBranches : undefined;
            resourceInputs["branchDeployBranches"] = state ? state.branchDeployBranches : undefined;
            resourceInputs["buildCommand"] = state ? state.buildCommand : undefined;
            resourceInputs["buildImage"] = state ? state.buildImage : undefined;
            resourceInputs["deployPreviews"] = state ? state.deployPreviews : undefined;
            resourceInputs["functionsDirectory"] = state ? state.functionsDirectory : undefined;
            resourceInputs["functionsRegion"] = state ? state.functionsRegion : undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["packageDirectory"] = state ? state.packageDirectory : undefined;
            resourceInputs["prettyUrls"] = state ? state.prettyUrls : undefined;
            resourceInputs["productionBranch"] = state ? state.productionBranch : undefined;
            resourceInputs["publishDirectory"] = state ? state.publishDirectory : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["stopBuilds"] = state ? state.stopBuilds : undefined;
            resourceInputs["wafPolicyId"] = state ? state.wafPolicyId : undefined;
        } else {
            const args = argsOrState as SiteBuildSettingsArgs | undefined;
            if ((!args || args.buildCommand === undefined) && !opts.urn) {
                throw new Error("Missing required property 'buildCommand'");
            }
            if ((!args || args.productionBranch === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productionBranch'");
            }
            if ((!args || args.publishDirectory === undefined) && !opts.urn) {
                throw new Error("Missing required property 'publishDirectory'");
            }
            if ((!args || args.siteId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'siteId'");
            }
            resourceInputs["baseDirectory"] = args ? args.baseDirectory : undefined;
            resourceInputs["branchDeployAllBranches"] = args ? args.branchDeployAllBranches : undefined;
            resourceInputs["branchDeployBranches"] = args ? args.branchDeployBranches : undefined;
            resourceInputs["buildCommand"] = args ? args.buildCommand : undefined;
            resourceInputs["buildImage"] = args ? args.buildImage : undefined;
            resourceInputs["deployPreviews"] = args ? args.deployPreviews : undefined;
            resourceInputs["functionsDirectory"] = args ? args.functionsDirectory : undefined;
            resourceInputs["functionsRegion"] = args ? args.functionsRegion : undefined;
            resourceInputs["packageDirectory"] = args ? args.packageDirectory : undefined;
            resourceInputs["prettyUrls"] = args ? args.prettyUrls : undefined;
            resourceInputs["productionBranch"] = args ? args.productionBranch : undefined;
            resourceInputs["publishDirectory"] = args ? args.publishDirectory : undefined;
            resourceInputs["siteId"] = args ? args.siteId : undefined;
            resourceInputs["stopBuilds"] = args ? args.stopBuilds : undefined;
            resourceInputs["wafPolicyId"] = args ? args.wafPolicyId : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SiteBuildSettings.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SiteBuildSettings resources.
 */
export interface SiteBuildSettingsState {
    baseDirectory?: pulumi.Input<string>;
    branchDeployAllBranches?: pulumi.Input<boolean>;
    branchDeployBranches?: pulumi.Input<pulumi.Input<string>[]>;
    buildCommand?: pulumi.Input<string>;
    buildImage?: pulumi.Input<string>;
    deployPreviews?: pulumi.Input<boolean>;
    functionsDirectory?: pulumi.Input<string>;
    functionsRegion?: pulumi.Input<string>;
    lastUpdated?: pulumi.Input<string>;
    packageDirectory?: pulumi.Input<string>;
    prettyUrls?: pulumi.Input<boolean>;
    productionBranch?: pulumi.Input<string>;
    publishDirectory?: pulumi.Input<string>;
    siteId?: pulumi.Input<string>;
    stopBuilds?: pulumi.Input<boolean>;
    /**
     * See more details in the netlify.WafPolicy resource.
     */
    wafPolicyId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SiteBuildSettings resource.
 */
export interface SiteBuildSettingsArgs {
    baseDirectory?: pulumi.Input<string>;
    branchDeployAllBranches?: pulumi.Input<boolean>;
    branchDeployBranches?: pulumi.Input<pulumi.Input<string>[]>;
    buildCommand: pulumi.Input<string>;
    buildImage?: pulumi.Input<string>;
    deployPreviews?: pulumi.Input<boolean>;
    functionsDirectory?: pulumi.Input<string>;
    functionsRegion?: pulumi.Input<string>;
    packageDirectory?: pulumi.Input<string>;
    prettyUrls?: pulumi.Input<boolean>;
    productionBranch: pulumi.Input<string>;
    publishDirectory: pulumi.Input<string>;
    siteId: pulumi.Input<string>;
    stopBuilds?: pulumi.Input<boolean>;
    /**
     * See more details in the netlify.WafPolicy resource.
     */
    wafPolicyId?: pulumi.Input<string>;
}
