// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class TeamFirewallTrafficRules extends pulumi.CustomResource {
    /**
     * Get an existing TeamFirewallTrafficRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TeamFirewallTrafficRulesState, opts?: pulumi.CustomResourceOptions): TeamFirewallTrafficRules {
        return new TeamFirewallTrafficRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'netlify:index/teamFirewallTrafficRules:TeamFirewallTrafficRules';

    /**
     * Returns true if the given object is an instance of TeamFirewallTrafficRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TeamFirewallTrafficRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TeamFirewallTrafficRules.__pulumiType;
    }

    public /*out*/ readonly lastUpdated!: pulumi.Output<string>;
    public readonly published!: pulumi.Output<outputs.TeamFirewallTrafficRulesPublished>;
    public /*out*/ readonly siteId!: pulumi.Output<string>;
    /**
     * Required if a default team was not configured in the provider configuration.
     */
    public readonly teamId!: pulumi.Output<string>;
    public readonly unpublished!: pulumi.Output<outputs.TeamFirewallTrafficRulesUnpublished>;

    /**
     * Create a TeamFirewallTrafficRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TeamFirewallTrafficRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TeamFirewallTrafficRulesArgs | TeamFirewallTrafficRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TeamFirewallTrafficRulesState | undefined;
            resourceInputs["lastUpdated"] = state ? state.lastUpdated : undefined;
            resourceInputs["published"] = state ? state.published : undefined;
            resourceInputs["siteId"] = state ? state.siteId : undefined;
            resourceInputs["teamId"] = state ? state.teamId : undefined;
            resourceInputs["unpublished"] = state ? state.unpublished : undefined;
        } else {
            const args = argsOrState as TeamFirewallTrafficRulesArgs | undefined;
            if ((!args || args.published === undefined) && !opts.urn) {
                throw new Error("Missing required property 'published'");
            }
            if ((!args || args.unpublished === undefined) && !opts.urn) {
                throw new Error("Missing required property 'unpublished'");
            }
            resourceInputs["published"] = args ? args.published : undefined;
            resourceInputs["teamId"] = args ? args.teamId : undefined;
            resourceInputs["unpublished"] = args ? args.unpublished : undefined;
            resourceInputs["lastUpdated"] = undefined /*out*/;
            resourceInputs["siteId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TeamFirewallTrafficRules.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering TeamFirewallTrafficRules resources.
 */
export interface TeamFirewallTrafficRulesState {
    lastUpdated?: pulumi.Input<string>;
    published?: pulumi.Input<inputs.TeamFirewallTrafficRulesPublished>;
    siteId?: pulumi.Input<string>;
    /**
     * Required if a default team was not configured in the provider configuration.
     */
    teamId?: pulumi.Input<string>;
    unpublished?: pulumi.Input<inputs.TeamFirewallTrafficRulesUnpublished>;
}

/**
 * The set of arguments for constructing a TeamFirewallTrafficRules resource.
 */
export interface TeamFirewallTrafficRulesArgs {
    published: pulumi.Input<inputs.TeamFirewallTrafficRulesPublished>;
    /**
     * Required if a default team was not configured in the provider configuration.
     */
    teamId?: pulumi.Input<string>;
    unpublished: pulumi.Input<inputs.TeamFirewallTrafficRulesUnpublished>;
}
